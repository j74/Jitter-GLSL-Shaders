<jittershader name="">
	<param name="gain_1" type="float" default="-4.2" />
	<param name="gain_2" type="float" default="0.0" />
	<param name="gain_3" type="float" default="0.2" />
	<param name="gain_4" type="float" default="0.5" />
	<param name="gain_r" type="float" default="0.0" />
	<param name="gain_g" type="float" default="0.0" />
	<param name="gain_b" type="float" default="0.0" />
	<param name="gain_a" type="float" default="6.4" />
	<param name="lightX" type="float" default="3.0" />
	<param name="lightY" type="float" default="4.8" />
	<param name="lightZ" type="float" default="4.0" />
	<param name="auto_light" type="float" default="1.0" />
	<language name="glsl" version="1.2">
		<bind param="lightX" program="vp" />
		<bind param="lightY" program="vp" />
		<bind param="lightZ" program="vp" />
		<bind param="auto_light" program="vp" />
		<bind param="gain_1" program="vp" />
		<bind param="gain_2" program="vp" />
		<bind param="gain_3" program="vp" />
		<bind param="gain_4" program="vp" />
		<bind param="gain_r" program="fp" />
		<bind param="gain_g" program="fp" />
		<bind param="gain_b" program="fp" />
		<bind param="gain_a" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
uniform float lightX;
uniform float lightY;
uniform float lightZ;
uniform float auto_light;
vec3 light = 10.0 * vec3(lightX, lightY, lightZ);

varying vec3 light_half;
varying vec3 vrtx_norm;
varying vec3 vertex_lightition;

void main() {            
    vrtx_norm = normalize(gl_NormalMatrix * gl_Normal);
    if (auto_light > 0.0)
    {
     light = normalize(gl_LightSource[0].position.xyz);
    }
    vertex_lightition = light;
    light_half = normalize(gl_LightSource[0].halfVector.xyz);
    gl_FrontColor = gl_Color;
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
uniform float gain_4;
uniform float gain_3;
uniform float gain_2;
uniform float gain_1;
float g_1 = 0.5 + gain_1/3.2;
float g_2 = 0.5 + gain_2/3.2;
float g_3 = 0.5 + gain_3/3.2;
float g_4 = 0.5 + gain_4/3.2;
uniform float gain_r;
uniform float gain_g;
uniform float gain_b;
uniform float gain_a;
float g_r = (6.4 + gain_r)/16.;
float g_g = (6.4 + gain_g)/16.;
float g_b = (6.4 + gain_b)/16.;
float g_a = (6.4 + gain_a)/16.;
varying vec3 vertex_lightition;
varying vec3 light_half;
varying vec3 vrtx_norm;

void main() {
    vec4 ambient_color = g_1 * gl_FrontMaterial.ambient * gl_LightSource[0].ambient + g_2 * gl_LightModel.ambient * gl_FrontMaterial.ambient;
    vec4 diffuse_color = g_3 * gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;
    vec4 specular_color = g_4 * gl_FrontMaterial.specular * gl_LightSource[0].specular * pow(max(dot(vrtx_norm, light_half), 0.0) , gl_FrontMaterial.shininess);
    float diffuse_value = max(dot(vrtx_norm, vertex_lightition), 0.0);
    vec4 total = ambient_color + diffuse_color * diffuse_value + specular_color;
    gl_FragColor = vec4(g_r * total.r, g_g * (0.5 + total.g), g_b * total.b, g_a * total.a);  
}
]]>
		</program>
	</language>
</jittershader>
