<jittershader name="OB-envtextmap-ch10">
	<param name="light_posX" type="float" default="3.0" />
	<param name="light_posY" type="float" default="4.8" />
	<param name="light_posZ" type="float" default="4.0" />
	<param name="basecolorX" type="float" default="0.0" />
	<param name="basecolorY" type="float" default="0.0" />
	<param name="basecolorZ" type="float" default="0.0" />
	<param name="envtextmap" type="int" default="0" />
	<param name="mixratio" type="float" default="1.8" />
	<param name="v_scale" type="float" default="-5.3" />
	<param name="v_offset" type="float" default="0.0" />
	<param name="v_offmd" type="float" default="0.0" />
	<language name="glsl" version="1.2">
		<bind param="light_posX" program="vp" />
		<bind param="light_posY" program="vp" />
		<bind param="light_posZ" program="vp" />
		<bind param="basecolorX" program="fp" />
		<bind param="basecolorY" program="fp" />
		<bind param="basecolorZ" program="fp" />
		<bind param="envtextmap" program="fp" />
		<bind param="mixratio" program="fp" />
		<bind param="v_offmd" program="vp" />
		<bind param="v_scale" program="vp" />
		<bind param="v_offset" program="vp" />
		<program name="vp" type="vertex">
<![CDATA[
uniform float light_posX;
uniform float light_posY;
uniform float light_posZ;
vec3 light_pos = vec3(0.5 + light_posX/3.2, 0.5 + light_posY/3.2, 0.5 + light_posZ/3.2);
varying vec3  Normal;
varying vec3  EyeDir;
varying float LightIntensity;
uniform float v_offset;
uniform float v_offmd;
uniform float v_scale;
float scale_normout = v_scale+6.3;

void main(void)
{
    // Vertex manipulationa and transform
    vec3 offset = 10.0 * vec3(v_offset, 0., 0.);
    if (v_offmd <= -0.1) {
     offset = 10.0 * vec3(0., 0., v_offset);
    }
    if (v_offmd >= 0.1) {
     offset = 10.0 * vec3(0., v_offset, 0.);
    }
    vec3 vertex = (gl_Vertex.xyz + offset) * scale_normout;
    gl_Position = gl_ModelViewProjectionMatrix * vec4(vertex,1.0);

    Normal         = normalize(gl_NormalMatrix * gl_Normal);
    vec4 pos       = gl_ModelViewMatrix * gl_Vertex;
    EyeDir         = pos.xyz;
    LightIntensity = max(dot(normalize(light_pos - EyeDir), Normal), 0.0);
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
const vec3 Xunitvec = vec3(1.0, 0.0, 0.0);
const vec3 Yunitvec = vec3(0.0, 1.0, 0.0);

uniform float basecolorX;
uniform float basecolorY;
uniform float basecolorZ;
vec3 basecolor = vec3(0.5 + basecolorX/3.2, 0.5 + basecolorY/3.2, 0.5 + basecolorZ/3.2);
uniform sampler2DRect envtextmap;
uniform float mixratio;
varying vec3  Normal;
varying vec3  EyeDir;
varying float LightIntensity;

void main()
{
    // Compute reflection vector
    
    vec3 reflectDir = reflect(EyeDir, Normal);

    // Compute altitude and azimuth angles

    vec2 index;

    index.y = dot(normalize(reflectDir), Yunitvec);
    reflectDir.y = 0.0;
    index.x = dot(normalize(reflectDir), Xunitvec) * 0.5;

    // Translate index values into proper range

    if (reflectDir.z >= 0.0)
        index = (index + 1.0) * 0.5;
    else
    {
        index.t = (index.t + 1.0) * 0.5;
        index.s = (-index.s) * 0.5 + 1.0;
    }
    
    // if reflectDir.z >= 0.0, s will go from 0.25 to 0.75
    // if reflectDir.z <  0.0, s will go from 0.75 to 1.25, and
    // that's OK, because we've set the texture to wrap.
  
    // Do a lookup into the environment map.
    vec3 envColor = vec3(texture2DRect(envtextmap, index));

    // Add lighting to base color and mix

    vec3 base = LightIntensity * basecolor;
    envColor = mix(envColor, base, mixratio);

    gl_FragColor = vec4(envColor, 1.0);
}
]]>
		</program>
	</language>
</jittershader>
