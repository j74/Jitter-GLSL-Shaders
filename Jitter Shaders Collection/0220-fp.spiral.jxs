<jittershader name="droste">
	<param name="time" type="float" default="-6.3" />
	<param name="branches" type="float" default="1.0" />
	<param name="scale" type="float" default="0.0" />
	<param name="speed" type="float" default="-2.9" />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.2">
		<bind param="time" program="fp" /> 
		<bind param="branches" program="fp" /> 
		<bind param="scale" program="fp" /> 
		<bind param="speed" program="fp" /> 
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord0;

void main()
{
	gl_Position = ftransform();
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord0;
uniform sampler2DRect tex0;
uniform float time;
uniform float branches;
uniform float scale;
uniform float speed;
float scale_norm = (scale + 6.3)/12.7;
float time_norm = (time + 6.4)/12.8;
const float TWO_PI = 3.141592*2.0;
const float speed_norm = speed+6.4;
vec2 resolution = textureSize(tex0,0);

//Complex Math:
vec2 complexExp(in vec2 z)
{
	return vec2(exp(z.x)*cos(z.y),exp(z.x)*sin(z.y));
}

vec2 complexLog(in vec2 z)
{
	return vec2(log(length(z)), atan(z.y, z.x));
}

vec2 complexMult(in vec2 a,in vec2 b)
{
	return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);
}

float complexMag(in vec2 z)
{
	return float(pow(length(z), 2.0));
}

vec2 complexReciprocal(in vec2 z)
{
	return vec2(z.x / complexMag(z), -z.y / complexMag(z));
}

vec2 complexDiv(in vec2 a,in vec2 b)
{
	return complexMult(a,complexReciprocal(b));
}

vec2 complexPower(in vec2 a, in vec2 b)
{
	return complexExp(complexMult(b,complexLog(a)));
}

float nearestPower(in float a, in float base)
{
	return pow(base, ceil(log(abs(a))/log(base))-1.0);
}

float map(float value, float istart, float istop, float ostart, float ostop) 
{
	   return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

void main()
 {
		
	//SHIFT AND SCALE COORDINATES TO <-1,1>
	vec2 co = vec2(texcoord0.x/resolution.x,texcoord0.y/resolution.y);
	vec2 z = (co-0.5)*2.0;
	
	//ESCHER GRID TRANSFORM:
	float factor = pow(1.0/scale_norm,branches);
	z = complexPower(z, complexDiv(vec2( log(factor) ,TWO_PI), vec2(0.0,TWO_PI) ) ); 
	
	//RECTANGULAR DROSTE EFFECT:
	z *= 1.0+log(time_norm*speed_norm)*(scale_norm-1.0);
	float npower = max(nearestPower(z.x,scale_norm),nearestPower(z.y,scale_norm));
	z.x = map(z.x,-npower,npower,-1.0,1.0);
	z.y = map(z.y,-npower,npower,-1.0,1.0);
	
	//UNDO SHIFT AND SCALE:
	z = z*0.5+0.5;
		
	vec2 z_lookup = vec2(z.x*resolution.x,z.y*resolution.y);
	gl_FragColor = texture2DRect(tex0,z_lookup);

}
]]>
		</program>
	</language>
</jittershader>
