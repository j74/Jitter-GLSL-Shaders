<jittershader name="textflow">
	<param name="time" type="float" default="1.4" />
	<param name="level" type="float" default="0.0" />
	<param name="gain_r" type="float" default="0.8" />
	<param name="gain_a" type="float" default="0.4" />
	<param name="gain_t" type="float" default="1.0" />
	<param name="mode" type="float" default="0.0" />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.0">
		<bind param="time" program="fp" />
		<bind param="level" program="fp" />
		<bind param="gain_r" program="fp" />
		<bind param="gain_a" program="fp" />
		<bind param="gain_t" program="fp" />
		<bind param="mode" program="fp" />
		<bind param="tex0" program="fp" />	
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord0;
varying vec2 texcoord1;

void main()
{
	// perform standard transform on vertex
	gl_Position = ftransform();
    
	// transform texcoords
	texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord0;
uniform sampler2DRect tex0;
uniform float time;
uniform float gain_t;
uniform float gain_r;
uniform float gain_a;
uniform float mode;
vec2 resolution = textureSize(tex0,0);

void main(void)
{
    vec2 p = -1.0 + 2.0 * texcoord0 / resolution;
    float r = gain_r*sqrt(dot(p,p));
    float a = atan(p.y,p.x);
    vec2 uv;
    
    if (p.x < 0.0)
    {
     p.x = - p.x;
    }
    uv.x = gain_a*(p.x/abs(p.y));
    uv.y = mod(.20*(gain_t*time) + .25/abs(p.y),1.0);
    if (mode <= 0.0) { 
     if (uv.y < 0.5) {
      uv.y = 1.0 - uv.y;
     }
    }
    vec2 coord = vec2(uv.x*resolution.x,uv.y*resolution.y);
    gl_FragColor = (4.0/exp(1.0/abs(p.y))) * vec4(texture2DRect(tex0,coord).xyz, 1.0);
}
]]>
		</program>
	</language>
</jittershader>