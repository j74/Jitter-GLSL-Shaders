<jittershader name="lumacut">
	<description>
	luminance threshold alpha blending
	</description>
	<param name="cut_up0" type="float" default="0.5" />
	<param name="cut_dwn0" type="float" default="0." />
	<param name="cut_up1" type="float" default="0.0" />
	<param name="cut_dwn1" type="float" default="0." />
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<language name="glsl" version="1.0">
		<bind param="cut_up0" program="fp" />
		<bind param="cut_dwn0" program="fp" />
		<bind param="cut_up1" program="fp" />
		<bind param="cut_dwn1" program="fp" />
		<bind param="tex0" program="fp" />	
		<bind param="tex1" program="fp" />	
		<program name="vp" type="vertex" source="sh.passthru.xform.vp.glsl" />
		<program name="fp" type="fragment">
<![CDATA[
//setup for single texture
varying vec2 texcoord0;
varying vec2 texcoord1;
//sampling input
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;
//luma threshold
uniform float cut_up0;
uniform float cut_up1;
uniform float cut_dwn0;
uniform float cut_dwn1;
const vec4 lumcoeff = vec4(0.299,0.587,0.114,0.);
// declare used variables:
vec4 a;
vec4 b;
vec4 out_vec;
float luminance0;
float luminance1;
float clo0;
float clo1;
float chi0;
float chi1;
float alum0;
float alum1;
float sel0;
float sel1;

void main()
{   

	// pickup the pixel
	a = texture2DRect(tex0, texcoord0);
	b = texture2DRect(tex1, texcoord1);

	// calculate luminance by dot product: a.x * lumcoeff.x + a.y * lumcoeff.y + a.z * lumcoeff.z 
	luminance0 = dot(a,lumcoeff);
	luminance1 = dot(b,lumcoeff);
	
	// compare to the thresholds, take only values between MIN and MAX using step(edge,value)
   	clo0 = step(luminance0,cut_up0); 
   	chi0 = step(cut_dwn0,luminance0);
   	clo1 = step(luminance1,cut_up1); 
   	chi1 = step(cut_dwn1,luminance1);

	//create alpha-luminance value for tex0 by combining the two comparisons [if both conditions are met, results in 1.0]
	alum0 = clo0 * chi0 * luminance0;
	//create alpha-luminance value for tex1 by combining the two comparisons [if both conditions are met, results in 1.0]
	alum1 = clo1 * chi1 * luminance1;

        // IF alpha-luminance tex1 < alpha-luminance tex0 THEN 0.0
	sel0 = step(alum0,alum1); 
        // IF alpha-luminance tex0 < alpha-luminance tex1 THEN 0.0
	sel1 = step(alum1,alum0); 

	// output texture in OpenGL rgba format
	out_vec.x = sel0 * a.x + sel1 * b.x;
	out_vec.y = sel0 * a.y + sel1 * b.y;
	out_vec.z = sel0 * a.z + sel1 * b.z;
	out_vec.w = 1.0;
	gl_FragColor = vec4(out_vec);
}
]]>
		</program>
	</language>
</jittershader>
