<jittershader name="gameoflife">
	<param name="thresh" type="float" default="0.0" />
	<param name="aging" type="float" default="-6.3" />
	<param name="step" type="float" default="-6.3" />
	<param name="amount" type="float" default="0.0" />
	<param name="tex0" type="int" default="0" />
	<param name="tex1" type="int" default="1" />
	<language name="glsl" version="1.2">
		<bind param="thresh" program="fp" />
		<bind param="aging" program="fp" />
		<bind param="step" program="fp" />
		<bind param="amount" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="tex1" program="fp" />	
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 texcoord0;
varying vec2 texcoord1;

void main()
{
    gl_Position = ftransform();
    texcoord0 = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
    texcoord1 = vec2(gl_TextureMatrix[1] * gl_MultiTexCoord1);
} 
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
varying vec2 texcoord0;
varying vec2 texcoord1;
uniform sampler2DRect tex0;
uniform sampler2DRect tex1;
uniform float thresh;
uniform float aging;
uniform float step;
uniform float amount;
float thresh_norm = (thresh + 6.3)/12.7;
float colorstep = (aging+6.3)/12.7;
float step_norm = 1.+(step+6.3)/2.;
float amount_norm = (amount + 6.3)/3.;
vec2 Offset0 = vec2(0.0,step_norm);           		// North
vec2 Offset1 = vec2(step_norm,step_norm);           	// Northeast
vec2 Offset2 = vec2(step_norm,0.0);           		// East
vec2 Offset3 = vec2(step_norm,-1.0*step_norm);          // Southeast
vec2 Offset4 = vec2(0.0,-1.0*step_norm);          	// South
vec2 Offset5 = vec2(-1.0*step_norm,-1.0*step_norm);     // Southwest
vec2 Offset6 = vec2(-1.0*step_norm,0.0);          	// West
vec2 Offset7 = vec2(-1.0*step_norm,step_norm);          // Northwest 
vec4 color;
vec4 test_vec;
float test;
float color_level;
int neighbours = 0;

void main (void)
{
	vec4 init = texture2DRect(tex0,texcoord0);
	float init_test = (init.r+init.g+init.b)/3.;
	if (init_test > thresh_norm)
	{
	 color = init;
	} else {
	 color = texture2DRect(tex1,texcoord1);
	 color_level = color.r+color.g+color.b;
	 test_vec = texture2DRect(tex1,texcoord1+Offset0);
	 test = test_vec.r+test_vec.g+test_vec.b;
 	 if (test > 1.5)
	  neighbours = neighbours + 1;
	 test_vec = texture2DRect(tex1,texcoord1+Offset1);
	 test = test_vec.r+test_vec.g+test_vec.b;
	 if (test > 1.5)
	  neighbours = neighbours + 1;
	 test_vec = texture2DRect(tex1,texcoord1+Offset2);
	 test = test_vec.r+test_vec.g+test_vec.b;
	 if (test > 1.5)
	  neighbours = neighbours + 1;
	 test_vec = texture2DRect(tex1,texcoord1+Offset3);
	 test = test_vec.r+test_vec.g+test_vec.b;
	 if (test > 1.5)
	  neighbours = neighbours + 1;
	 test_vec = texture2DRect(tex1,texcoord1+Offset4);
	 test = test_vec.r+test_vec.g+test_vec.b;
	 if (test > 1.5)
	  neighbours = neighbours + 1;
	 test_vec = texture2DRect(tex1,texcoord1+Offset5);
	 test = test_vec.r+test_vec.g+test_vec.b;
	 if (test > 1.5)
	  neighbours = neighbours + 1;
	 test_vec = texture2DRect(tex1,texcoord1+Offset6);
	 test = test_vec.r+test_vec.g+test_vec.b;
	 if (test > 1.5)
	  neighbours = neighbours + 1;
	 test_vec = texture2DRect(tex1,texcoord1+Offset7);
	 test = test_vec.r+test_vec.g+test_vec.b;
	 if (test > 1.5)
	  neighbours = neighbours + 1;
 	 if (color_level > 1.5) 
	 {
	  // There is a cell still living....
	  if (neighbours < 2 || neighbours > 3)      
	  // Too few or too many neighbours, cell must die
	    color = vec4(0.0, 0.0, 0.0, 1.0);		
	  else if (color_level > 0.0)
	    // Cell survives but ages			
	    color.r = color.r - colorstep;        
	    color.g = color.g - colorstep;        
	    color.b = color.b - colorstep;  
	 } else {
	   // Cell was empty
	   if (neighbours == 3)
            // By neigh = 3, cell is born
	    color = vec4(amount_norm,amount_norm,amount_norm,1.0);
	    // In case of 2, just keep fading the dead...
	   else 
	    // Stays dead but fades away
	    color.r = color.r - colorstep;        
	    color.g = color.g - colorstep;        
	    color.b = color.b - colorstep;        
	 }
	}
	gl_FragColor = color;
}
]]>
	</program>
    </language>
</jittershader>