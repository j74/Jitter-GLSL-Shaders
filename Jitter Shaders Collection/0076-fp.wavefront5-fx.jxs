<jittershader name="wavefront">
	<param name="amount" type="float" default="1.0" />
	<param name="width" type="float" default="1." />
	<param name="time" type="float" default="0." />
	<param name="fine" type="float" default="0." />
	<param name="gain_T" type="float" default="0." />
	<param name="frequency" type="float" default="0.1" />
	<param name="x0" type="float" default="0." />
	<param name="y0" type="float" default="0." />
	<param name="tex0" type="int" default="0" />
	<language name="glsl" version="1.0">
		<bind param="width" program="vp" /> 
		<bind param="x0" program="fp" /> 
		<bind param="y0" program="fp" /> 
		<bind param="time" program="fp" />
		<bind param="fine" program="fp" />
		<bind param="frequency" program="fp" />
		<bind param="amount" program="fp" />
		<bind param="gain_T" program="fp" />
		<bind param="tex0" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec2 coord;
varying vec2 texcoord11;
varying vec2 texcoord00;
varying vec2 texcoord02;
varying vec2 texcoord20;
varying vec2 texcoord22;
uniform float width;

void main(void)
{
        // Get vertex position in gl_Position
	float pos_x = sign(gl_Vertex.x) - 0.5;
	float pos_y = sign(gl_Vertex.y) - 0.5;
	pos_x = pos_x * 2.0;
	pos_y = pos_y * 2.0;
	gl_Position = vec4(pos_x, pos_y,0.0,1.0);

        // Transform coordinates in 2D (used by fragment)
	coord = (gl_ProjectionMatrix*gl_Vertex).xy;
	vec2 texcoord = vec2(gl_TextureMatrix[0] * gl_MultiTexCoord0);
	texcoord11 = texcoord;
	texcoord00 = texcoord + vec2(-10.0 * width, -10.0 * width);
	texcoord02 = texcoord + vec2( 10.0 * width, -10.0 * width);
	texcoord20 = texcoord + vec2( 10.0 * width,  10.0 * width);
	texcoord22 = texcoord + vec2(-10.0 * width, 10.0 * width);
}

]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[

const float pi = 3.14159;

varying vec2 coord;
varying vec2 texcoord11;
varying vec2 texcoord00;
varying vec2 texcoord02;
varying vec2 texcoord20;
varying vec2 texcoord22;
uniform sampler2DRect tex0;
uniform float x0;
uniform float y0;
uniform float time;
uniform float fine;
uniform float frequency;
uniform float amount;
uniform float gain_T;

float time_space;
float wave;
float delta_x;
float delta_y;
float delta_x2;
float delta_y2;
float time_fine = time + 0.05 * fine;
vec4 out_vec;

void main()
{   

	// Calculate time is given by external clocking + offset in position divided by wave_speed
	delta_x = coord.x - x0;
	delta_y = coord.y - y0;
        delta_x2 = delta_x * delta_x;
        delta_y2 = delta_y * delta_y;
	time_space = gain_T * (time_fine + (sqrt(delta_x2 + delta_y2)/(frequency*frequency)));

	// Simulate the wave in amplitude, frequency and time
	wave = sin(2*pi*(10.0*(time_fine+6.4))*frequency*time_space);

	// Apply the wave on top of the texture
	out_vec = (1.0 + amount) * texture2DRect(tex0, texcoord11);
	out_vec += 1.0 * amount * (wave-1.0) * texture2DRect(tex0, texcoord00);
	out_vec += 0.5 * amount * (wave-1.0) * texture2DRect(tex0, texcoord02);
	out_vec += 0.5 * amount * (wave-1.0) * texture2DRect(tex0, texcoord20);
	out_vec += -1.0 * amount * (wave-1.0) * texture2DRect(tex0, texcoord22);
	out_vec.r += 0.2 * (2*wave)*(2*wave) * (wave-1.0) * texture2DRect(tex0, texcoord11).r;
	out_vec.g += -0.1 * (2*wave)*(2*wave) * (wave-1.0) * texture2DRect(tex0, texcoord11).g;
	out_vec.b += -0.1 * (2*wave)*(2*wave) * (wave-1.0) * texture2DRect(tex0, texcoord11).b;

	gl_FragColor = out_vec;
}
]]>
		</program>
	</language>
</jittershader>
